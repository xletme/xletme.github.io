<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解Docker 容器和镜像</title>
      <link href="2021/05/19/shen-ru-li-jie-docker-rong-qi-he-jing-xiang/"/>
      <url>2021/05/19/shen-ru-li-jie-docker-rong-qi-he-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="理解-Docker-containers-and-images"><a href="#理解-Docker-containers-and-images" class="headerlink" title="理解 Docker containers and images"></a>理解 Docker containers and images</h1><h2 id="这篇文章详细的介绍container与images之间的关系-下面是概括图"><a href="#这篇文章详细的介绍container与images之间的关系-下面是概括图" class="headerlink" title="这篇文章详细的介绍container与images之间的关系 ,下面是概括图"></a>这篇文章详细的介绍container与images之间的关系 ,下面是概括图</h2><p><img src="/medias/docker/containerAndImage/1.png">  </p><hr><p>##1. image(镜像定义) : 镜像（Image）就是一堆只读层（read-only layer）的统一视角,请看下面图片  </p><p><img src="/medias/docker/containerAndImage/2.png">  </p><p>从左边我们看到了多个只读层，它们重叠在一起。除了最下面一层，其它层都会有一个指针指向下一层。这些层是Docker内部的实现细节，并且能够在主机（译者注：运行Docker的机器）的文件系统上访问到。统一文件系统（union file system）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。我们可以在图片的右边看到这个视角的形式  </p><p>下图是我机器上的目录 images下是镜像id,container文件下里面是containerID<br><img src="/medias/docker/containerAndImage/3.jpg"> </p><hr><p>##2. container定义 : 容器（container）的定义和镜像（image）几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。  </p><p> <img src="/medias/docker/containerAndImage/4.png"> </p><p> **要点：容器 = 镜像 + 读写层。并且容器的定义并没有提及是否要运行容器.**  </p><p>##3. 运行时容器定义 : 一个运行态容器（running container）被定义为一个可读写的统一文件系统加上隔离的进程空间和包含其中的进程。下面这张图片展示了一个运行中的容器.</p><p> <img src="/medias/docker/containerAndImage/5.png"><br>##4. 镜像层定义 : 为了将零星的数据整合起来，我们提出了镜像层（image layer）这个概念。</p><p><img src="/medias/docker/containerAndImage/6.png"> </p><p><u>元数据（metadata）就是关于这个层的额外信息，它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息。需要注意，只读层和读写层都包含元数据。</u>   </p><p><img src="/medias/docker/containerAndImage/7.png"><br><em><strong>每一层都包括了一个指向父层的指针</strong></em></p><p><img src="/medias/docker/containerAndImage/8.png"> </p><p>##5. 创建docker过程 </p><blockquote><ol><li>docker create + docker start<br>docker create <image-id><br><img src="/medias/docker/containerAndImage/9.png"><br><img src="/medias/docker/containerAndImage/10.png"> </li></ol></blockquote><blockquote><p>docker start <container-id><br> <img src="/medias/docker/containerAndImage/11.png"><br>2. docker run<br><img src="/medias/docker/containerAndImage/12.png"><br>3. docker run = docker create + docker start 类似 git pull = git fetch + git merge<br><img src="/medias/docker/containerAndImage/13.png">  </p></blockquote><hr><p>##6. docker ps -a : docker ps –a命令会列出所有的容器，不管是运行的，还是停止的。  </p><p><img src="/medias/docker/containerAndImage/14.png">  </p><p>##7. docker image -a : docker images –a命令列出了所有的镜像，也可以说是列出了所有的可读层。如果你想要查看某一个image-id下的所有层，可以使用docker history来查看.  </p><p><img src="/medias/docker/containerAndImage/15.png">  </p><p>##8. docker stop <container-id></p><p><img src="/medias/docker/containerAndImage/16.png"></p><p>##9. docker kill <container-id>  </p><p><img src="/medias/docker/containerAndImage/17.png"></p><p>##10. docker pause <container-id>  </p><p><img src="/medias/docker/containerAndImage/18.png"></p><p>##11. docker commit <container-id>  </p><p><img src="/medias/docker/containerAndImage/19.png"></p><p>##12. docker build </p><p><img src="/medias/docker/containerAndImage/20.png"><br><img src="/medias/docker/containerAndImage/21.png"></p><p>原文链接 : <a href="http://merrigrove.blogspot.com/2015/10/visualizing-docker-containers-and-images.html">docker详解 container 和 image</a>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>seata 分布式事物学习</title>
      <link href="2021/05/18/seata-fen-bu-shi-shi-wu-xue-xi/"/>
      <url>2021/05/18/seata-fen-bu-shi-shi-wu-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>参考链接: <a href="http://seata.io/zh-cn/blog/seata-at-tcc-saga.html">http://seata.io/zh-cn/blog/seata-at-tcc-saga.html</a><br>一、分布式事物产生的背景</p><p>随着业务数据的发展,单库单表无法满足业务需求,对数据库DB进行水平拆分成多个 DB -&gt; DB1 DB2 DB3</p><p>业务系统拆分成多个  Service -&gt; service1 service2 service3</p><p>一个完整的业务,需要调用多个服务,多个数据库落库,如果保证服务之间的数据一致性成为一个难题</p><p>这就被成为分布式事物</p><p>二、分布式事物两阶段协议</p><p>一阶段: 事物准备<br>二阶段: 资源提交/回滚</p><p>三、分布式事物产品模块</p><p>如下图所示，Seata 中有三大模块，分别是 TM、RM 和 TC。 其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的服务端独立部署。</p><p><img src="/medias/seata/seataAll.png"></p><p>Seata执行流程:<br>    1.TM 开启分布式事务（TM 向 TC 注册全局事务记录）;<br>    2.按业务场景，编排数据库、服务等事务内资源(RM 向 TC 汇报资源准备状态) ;<br>    3.TM 结束分布式事务，事务一阶段结束(TM 通知 TC 提交/回滚分布式事务);<br>    4.TC 汇总事务信息，决定分布式事务是提交还是回滚;<br>    5.TC 通知所有 RM 提交/回滚 资源，事务二阶段结束.</p><p>四、简单介绍下AT模式</p><p>AT模式对业务无侵入;</p><p>一阶段: Seata对业务sql进行拦截,找到sql要更新的数据,保留更新前的数据 before_image ,执行更新操作,<br>保留更新后的数据 after_image ,最后生成行锁,以上操作在一个事物内完成,保证其原子性</p><p>二阶段提交: Seata框架只需删除 before_image after_image 行锁</p><p>二阶段回滚:<br>1.正常情况,直接按照before_image 还原业务数据后,删除before_image after_image 行锁<br>2.异常情况,after_image 和此时数据库数据不一致(脏读),由开发人员解决</p><p>另外Seata还有 TCC Saga模式,感兴趣的可以自行观看.<br>参考链接: <a href="http://seata.io/zh-cn/blog/seata-at-tcc-saga.html">http://seata.io/zh-cn/blog/seata-at-tcc-saga.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetCode--gcdOfString</title>
      <link href="2021/05/17/leetcode-gcdofstring/"/>
      <url>2021/05/17/leetcode-gcdofstring/</url>
      
        <content type="html"><![CDATA[<p>题目示例:<br>对于字符串 S 和 T，只有在 S = T + … + T（T 自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。<br>     *<br>     * 返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。<br>     *<br>     *  <br>     *<br>     * 示例 1：<br>     *<br>     * 输入：str1 = “ABCABC”, str2 = “ABC”<br>     * 输出：”ABC”<br>     * 示例 2：<br>     *<br>     * 输入：str1 = “ABABAB”, str2 = “ABAB”<br>     * 输出：”AB”<br>     * 示例 3：<br>     *<br>     * 输入：str1 = “LEET”, str2 = “CODE”<br>     * 输出：””</p><pre><code> 提示：      *      * 1 &lt;= str1.length &lt;= 1000      * 1 &lt;= str2.length &lt;= 1000      * str1[i] 和 str2[i] 为大写英文字母</code></pre><p>  解题思路:<br>  1.找出 str1 str2 长度的最大公约数 ，然后截取字符串看是否满足题意<br>  2.check 是否是重复的字符串样式  前面1 2都得经过推理才能得到</p><p>  java代码示例:<br>  public String gcdOfStrings(String str1, String str2) {<br>          int len1 = str1.length();<br>          int len2 = str2.length();<br>          for (int i = Math.min(len1,len2); i &gt;= 1; i–) {<br>              if (len1 % i == 0 &amp;&amp; len2 % i == 0) {<br>                  String str = str1.substring(0, i);<br>                  if (calculateRepeat(str,str1) &amp;&amp; calculateRepeat(str,str2)) {<br>                      return str;<br>                  }<br>              }<br>          }<br>          return “”;<br>      }</p><p>  public boolean calculateRepeat(String s, String str) {<br>          int num = str.length() / s.length();<br>          StringBuilder builder = new StringBuilder();<br>          for (int i = 0 ; i &lt; num; i++) {<br>              builder.append(s);<br>          }<br>          return builder.toString().equals(str);<br>      }     </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="2021/05/17/markdown-shou-gao/"/>
      <url>2021/05/17/markdown-shou-gao/</url>
      
        <content type="html"><![CDATA[<p>#MarkDown 基本教程</p><hr><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><p>#T1<br>##T2<br>###T3<br>####T4<br>#####T5<br>######T6</p><p>runoob.com<br>google.com</p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><hr><hr><hr><hr><hr><p><del><a href="http://www.baidu.com/">www.baidu.com</a></del></p><hr><p><u>带下划线文本 underline</u></p><hr><p>创建脚注格式类似这样 [^RUNOOB]</p><p>1.第一项</p><p>2.第二项</p><p>3.第三项<br>————————————————————————————</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><hr><p>1.第一项:  </p><ul><li>第一项嵌套的第一个元素  </li><li>第一项嵌套的第二个元素  </li></ul><p>2.第二项:  </p><ul><li>第二项嵌套的第一个元素  </li><li>第二项嵌套的第二个元素      </li></ul><hr><blockquote><p>最外层 </p><blockquote><p>第一层  </p><blockquote><p>第二层  </p></blockquote></blockquote></blockquote><hr><blockquote><p>区块中使用列表<br>1.第一项<br>2.第二项</p><ul><li>第一项  </li><li>第二项  </li><li>第三项</li><li>第四项 </li></ul></blockquote><hr><ul><li>第一项  <blockquote><p>这是区块列表<br>这是第二个区块列表  </p></blockquote></li><li>第二项  </li></ul><p>============================</p><hr><p>————————————————————————————————————————</p><p><code>sayHello(String str)</code>函数  </p><pre><code>public void sayHello(String str) &#123;    System.out.println(str);&#125;</code></pre><hr><pre><code class="java">pulic boolean verify(String str) &#123;    return str.equals(&quot;carry&quot;);&#125;</code></pre><hr><p>这是一个github地址 <a href="https://github.com/xletme/xletme.github.io">xletme</a></p><hr><p>1.百度链接 <a href="http://www.baidu.com/">BAIDU</a><br>2.腾讯链接 <a href="http://www.google.com/">GOOGLE</a>  </p><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"><br><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB">   </p><hr><table><thead><tr><th>比赛</th><th>新闻</th><th>积分榜</th></tr></thead><tbody><tr><td>湖人 VS 鹈鹕</td><td>湖人 110-98轻取鹈鹕</td><td>湖人名列西部第七</td></tr></tbody></table><hr><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑   </p><p>**正常显示星号**  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/14/hello-world/"/>
      <url>2021/04/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
